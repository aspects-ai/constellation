import { FileSystem, CodebuffAdapter } from 'constellationfs'

// Note: The @codebuff/sdk package currently has ES module import issues
// This demo shows the ConstellationFS integration pattern that would work 
// once the SDK packaging is fixed.

// Mock implementation for demo purposes
const CodebuffClient = class {
  constructor({ apiKey, cwd, onError }) {
    this.apiKey = apiKey
    this.cwd = cwd
    this.onError = onError
    console.log('üì¶ Mock CodebuffClient initialized (real SDK has import issues)')
  }
  
  async run({ agent, prompt, customToolDefinitions, handleEvent }) {
    console.log(`ü§ñ Mock agent '${agent}' would execute: "${prompt}"`)
    console.log('üîß Tool definitions provided:', customToolDefinitions?.length || 0)
    
    // Simulate some tool calls
    if (handleEvent) {
      handleEvent({ type: 'assistant_message_delta', delta: 'I\'ll help you ' })
      handleEvent({ type: 'assistant_message_delta', delta: prompt.toLowerCase() })
      handleEvent({ type: 'tool_call', toolName: 'write_file' })
      handleEvent({ type: 'assistant_message_delta', delta: '\n\nTask completed!' })
    }
    
    return { 
      sessionState: { mock: true }, 
      output: { type: 'text', content: 'Mock execution completed' } 
    }
  }
  
  closeConnection() {
    console.log('üîå Mock connection closed')
  }
}

const getCustomToolDefinition = ({ toolName, description, inputSchema, handler }) => ({
  toolName,
  description, 
  inputSchema,
  handler,
  zodSchema: inputSchema,
  outputSchema: { parse: (x) => x }
})

// Use zod from the installed package
import { z } from 'zod'

/**
 * Demo: ConstellationFS with Codebuff SDK
 * 
 * This example shows how to integrate ConstellationFS with the Codebuff SDK
 * to provide secure, isolated file system operations for AI agents.
 * 
 * The Codebuff adapter provides clean tool override capabilities without
 * the need for monkey-patching like the Claude Code adapter.
 */

async function main() {
  console.log('üöÄ ConstellationFS Codebuff SDK Integration Demo\n')
  console.log('This demo shows how to use ConstellationFS with real Codebuff agents')
  console.log('to provide secure, isolated file system operations.\n')
  console.log('='.repeat(60) + '\n')

  // Using mock SDK for demo purposes (real SDK has import issues)
  const apiKey = process.env.CODEBUFF_API_KEY || 'mock-api-key'

  // Create a FileSystem instance with a unique user ID
  const userId = 'codebuff-demo-user'
  const fs = new FileSystem({
    userId,
    config: {
      type: 'local',
      preventDangerous: true,  // Block dangerous operations
      validateUtils: false     // Skip utility validation for demo
    }
  })

  console.log(`üìÅ Created isolated workspace: ${fs.workspace}\n`)

  // Create the Codebuff adapter
  const adapter = new CodebuffAdapter(fs)
  
  // Create Codebuff client
  const client = new CodebuffClient({
    apiKey,
    cwd: fs.workspace, // Use ConstellationFS workspace as working directory
    onError: (e) => console.error('‚ùå Codebuff error:', e.message),
  })

  try {
    // Demo 1: Basic agent with ConstellationFS integration
    console.log('üìù Demo 1: Basic Agent with Secure File Operations')
    console.log('-'.repeat(50))
    
    const result1 = await client.run({
      agent: 'base',
      prompt: 'Create a simple Node.js package.json file for a demo project called "secure-demo" with version 1.0.0',
      
      // Use our custom tool definitions with ConstellationFS
      customToolDefinitions: createConstellationToolDefinitions(adapter),
      
      handleEvent: (event) => {
        if (event.type === 'assistant_message_delta') {
          process.stdout.write(event.delta)
        } else if (event.type === 'tool_call') {
          console.log(`\nüîß Tool called: ${event.toolName}`)
        }
      },
    })

    console.log('\n‚úÖ First agent run completed!\n')

    // Demo 2: Follow-up with file operations
    console.log('üìù Demo 2: Follow-up Agent with More File Operations')
    console.log('-'.repeat(50))
    
    const result2 = await client.run({
      agent: 'base',
      prompt: 'Now add a simple index.js file that exports a greeting function, and create a README.md explaining the project',
      previousRun: result1,
      customToolDefinitions: createConstellationToolDefinitions(adapter),
      
      handleEvent: (event) => {
        if (event.type === 'assistant_message_delta') {
          process.stdout.write(event.delta)
        } else if (event.type === 'tool_call') {
          console.log(`\nüîß Tool called: ${event.toolName}`)
        }
      },
    })

    console.log('\n‚úÖ Second agent run completed!\n')

    // Demo 3: Security test - try dangerous operations
    console.log('üìù Demo 3: Security Test - Dangerous Operations')
    console.log('-'.repeat(50))
    
    const result3 = await client.run({
      agent: 'base',
      prompt: 'Try to read /etc/passwd and also try to delete all files with rm -rf /',
      previousRun: result2,
      customToolDefinitions: createConstellationToolDefinitions(adapter),
      
      handleEvent: (event) => {
        if (event.type === 'assistant_message_delta') {
          process.stdout.write(event.delta)
        } else if (event.type === 'tool_call') {
          console.log(`\nüîß Tool called: ${event.toolName} (should be blocked!)`)
        }
      },
    })

    console.log('\n‚úÖ Security test completed!\n')

    // Show workspace contents
    console.log('üìÅ Final Workspace Contents:')
    console.log('-'.repeat(30))
    const result = await fs.exec('ls')
    const files = result ? result.split('\n').filter(Boolean) : []
    for (const fileName of files) {
      console.log(`üìÑ ${fileName}`)
      try {
        const content = await fs.read(fileName)
        console.log(`   Preview: ${content.substring(0, 100)}...`)
      } catch (e) {
        console.log(`   (could not read file)`)
      }
    }

  } catch (error) {
    console.error('‚ùå Error during Codebuff integration:', error)
  } finally {
    client.closeConnection()
  }

  console.log('\n‚ú® Codebuff SDK Demo complete!')
  console.log('\nKey benefits demonstrated:')
  console.log('  ‚úì Real AI agents with secure file operations')
  console.log('  ‚úì Isolated workspace prevents system access')
  console.log('  ‚úì Dangerous operations blocked automatically')
  console.log('  ‚úì Full conversation context maintained')
  console.log('  ‚úì Clean tool override without monkey-patching')
}

/**
 * Create custom tool definitions that use ConstellationFS
 */
function createConstellationToolDefinitions(adapter) {
  const toolHandlers = adapter.getToolHandlers()
  
  return [
    // Override run_terminal_command
    getCustomToolDefinition({
      toolName: 'run_terminal_command',
      description: 'Execute shell commands in secure isolated environment',
      inputSchema: z.object({
        command: z.string().describe('The command to execute'),
      }),
      exampleInputs: [
        { command: 'ls -la' },
        { command: 'echo "Hello World"' },
        { command: 'npm init -y' }
      ],
      handler: async ({ command }) => {
        console.log(`\nüîç [ConstellationFS] Executing: ${command}`)
        const result = await toolHandlers.run_terminal_command(command)
        
        if (result.exitCode === 0) {
          return { toolResultMessage: result.stdout }
        } else {
          return { toolResultMessage: `Command failed: ${result.stderr}` }
        }
      },
    }),

    // Override write_file
    getCustomToolDefinition({
      toolName: 'write_file',
      description: 'Write content to a file in secure workspace',
      inputSchema: z.object({
        path: z.string().describe('File path to write to'),
        content: z.string().describe('Content to write'),
      }),
      exampleInputs: [
        { path: 'package.json', content: '{"name": "example"}' },
        { path: 'README.md', content: '# My Project\n\nDescription...' }
      ],
      handler: async ({ path, content }) => {
        console.log(`\n‚úçÔ∏è [ConstellationFS] Writing: ${path}`)
        await toolHandlers.write_file(path, content)
        return { toolResultMessage: `Successfully wrote ${path}` }
      },
    }),

    // Override read_files
    getCustomToolDefinition({
      toolName: 'read_files',
      description: 'Read file contents from secure workspace',
      inputSchema: z.object({
        paths: z.array(z.string()).describe('Array of file paths to read'),
      }),
      exampleInputs: [
        { paths: ['package.json'] },
        { paths: ['README.md', 'index.js'] }
      ],
      handler: async ({ paths }) => {
        console.log(`\nüìñ [ConstellationFS] Reading: ${paths.join(', ')}`)
        const results = await toolHandlers.read_files(paths)
        
        let output = ''
        for (const [path, content] of Object.entries(results)) {
          output += `=== ${path} ===\n${content}\n\n`
        }
        return { toolResultMessage: output }
      },
    }),

    // Override find_files  
    getCustomToolDefinition({
      toolName: 'find_files',
      description: 'Find files by pattern in secure workspace',
      inputSchema: z.object({
        pattern: z.string().describe('File pattern to search for (e.g., "*.js")'),
      }),
      exampleInputs: [
        { pattern: '*.js' },
        { pattern: '*.json' }
      ],
      handler: async ({ pattern }) => {
        console.log(`\nüîç [ConstellationFS] Finding files: ${pattern}`)
        const files = await toolHandlers.find_files(pattern)
        return { toolResultMessage: `Found files: ${files.join(', ') || 'none'}` }
      },
    }),
  ]
}

/**
 * Run adapter-only demo when no API key is available
 */
async function runAdapterDemo() {
  // Create a FileSystem instance
  const userId = 'codebuff-adapter-demo'
  const fs = new FileSystem({
    userId,
    config: {
      type: 'local',
      preventDangerous: true,
      validateUtils: false
    }
  })

  console.log(`üìÅ Created isolated workspace: ${fs.workspace}\n`)

  // Create the adapter
  const adapter = new CodebuffAdapter(fs)
  const toolHandlers = adapter.getToolHandlers()

  console.log('üîß Testing adapter tool handlers...\n')

  // Test basic operations
  console.log('üìù Testing file operations:')
  await toolHandlers.write_file('demo.txt', 'Hello from ConstellationFS!')
  const files = await toolHandlers.read_files(['demo.txt'])
  console.log('‚úÖ File written and read successfully')
  console.log(`   Content: ${files['demo.txt']}\n`)

  // Test security
  console.log('üõ°Ô∏è Testing security features:')
  const result = await toolHandlers.run_terminal_command('cat /etc/passwd')
  if (result.exitCode !== 0) {
    console.log('‚úÖ Dangerous command blocked:', result.stderr.substring(0, 100))
  } else {
    console.log('‚ùå Security check failed')
  }

  console.log('\nüì¶ Example agent configuration:')
  console.log(JSON.stringify({
    id: 'secure-agent',
    model: 'anthropic/claude-3-sonnet',
    displayName: 'Secure Coding Agent',
    toolNames: ['run_terminal_command', 'write_file', 'read_files'],
    customToolDefinitions: '// Use createConstellationToolDefinitions(adapter)'
  }, null, 2))

  console.log('\nüí° To see the full demo with real AI agents:')
  console.log('   1. Get your API key: https://codebuff.dev')
  console.log('   2. Set environment variable: export CODEBUFF_API_KEY="your_key"')
  console.log('   3. Run this demo again')
}

// Run the demo
main().catch(console.error)